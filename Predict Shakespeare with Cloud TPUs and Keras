{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Predict Shakespeare with Cloud TPUs and Keras","version":"0.3.2","provenance":[{"file_id":"https://github.com/tensorflow/tpu/blob/master/tools/colab/shakespeare_with_tpu_and_keras.ipynb","timestamp":1558114113457}],"collapsed_sections":["N6ZDpd9XzFeN"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"N6ZDpd9XzFeN"},"source":["##### Copyright 2018 The TensorFlow Hub Authors.\n","\n","Licensed under the Apache License, Version 2.0 (the \"License\");"]},{"cell_type":"code","metadata":{"cellView":"form","colab_type":"code","id":"KUu4vOt5zI9d","colab":{}},"source":["# Copyright 2018 The TensorFlow Hub Authors. All Rights Reserved.\n","#\n","# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","#     http://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License.\n","# =============================================================================="],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"innBbve1LdjE","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"edfbxDDh2AEs"},"source":["## Predict Shakespeare with Cloud TPUs and Keras"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"RNo1Vfghpa8j"},"source":["## Overview\n","\n","This example uses [tf.keras](https://www.tensorflow.org/guide/keras) to build a *language model* and train it on a Cloud TPU. This language model predicts the next character of text given the text so far. The trained model can generate new snippets of text that read in a similar style to the text training data.\n","\n","The model trains for 10 epochs and completes in approximately 5 minutes.\n","\n","This notebook is hosted on GitHub. To view it in its original repository, after opening the notebook, select **File > View on GitHub**."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"dgAHfQtuhddd"},"source":["## Learning objectives\n","\n","In this Colab, you will learn how to:\n","*   Build a two-layer, forward-LSTM model.\n","*   Convert a `tf.keras` model to an equivalent TPU version and then use the standard Keras methods to train: `fit`, `predict`, and `evaluate`.\n","*   Use the trained model to make predictions and generate your own Shakespeare-esque play.\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"QrprJD-R-410"},"source":["## Instructions"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"_I0RdnOSkNmi"},"source":["<h3>  &nbsp;&nbsp;Train on TPU&nbsp;&nbsp; <a href=\"https://cloud.google.com/tpu/\"><img valign=\"middle\" src=\"https://raw.githubusercontent.com/GoogleCloudPlatform/tensorflow-without-a-phd/master/tensorflow-rl-pong/images/tpu-hexagon.png\" width=\"50\"></a></h3>\n","\n","   1. On the main menu, click Runtime and select **Change runtime type**. Set \"TPU\" as the hardware accelerator.\n","   1. Click Runtime again and select **Runtime > Run All**. You can also run the cells manually with Shift-ENTER. "]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"kYxeFuKCUx9d"},"source":["TPUs are located in Google Cloud, for optimal performance, they read data directly from Google Cloud Storage (GCS)"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Lvo0t7XVIkWZ"},"source":["## Data, model, and training"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"xzpUtDMqmA-x"},"source":["In this example, you train the model on the combined works of William Shakespeare, then use the model to compose a play in the style of *The Great Bard*:\n","\n","<blockquote>\n","Loves that led me no dumbs lack her Berjoy's face with her to-day.  \n","The spirits roar'd; which shames which within his powers  \n","\tWhich tied up remedies lending with occasion,  \n","A loud and Lancaster, stabb'd in me  \n","\tUpon my sword for ever: 'Agripo'er, his days let me free.  \n","\tStop it of that word, be so: at Lear,  \n","\tWhen I did profess the hour-stranger for my life,  \n","\tWhen I did sink to be cried how for aught;  \n","\tSome beds which seeks chaste senses prove burning;  \n","But he perforces seen in her eyes so fast;  \n","And _  \n","</blockquote>\n"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"KRQ6Fjra3Ruq"},"source":["### Download data\n","\n","Download *The Complete Works of William Shakespeare* as a single text file from [Project Gutenberg](https://www.gutenberg.org/). You use snippets from this file as the *training data* for the model. The *target* snippet is offset by one character."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"j8sIXh1DEDDd","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"775baead-3c7c-47dd-88d8-1a91333d9e02","executionInfo":{"status":"ok","timestamp":1558114245132,"user_tz":-330,"elapsed":13036,"user":{"displayName":"Param Deshpande","photoUrl":"https://lh5.googleusercontent.com/-8kLZUXMghn4/AAAAAAAAAAI/AAAAAAAAACE/sgnppB7wn4Y/s64/photo.jpg","userId":"14177415786827029018"}}},"source":["!wget --show-progress --continue -O /content/shakespeare.txt http://www.gutenberg.org/files/100/100-0.txt"],"execution_count":2,"outputs":[{"output_type":"stream","text":["--2019-05-17 17:30:36--  http://www.gutenberg.org/files/100/100-0.txt\n","Resolving www.gutenberg.org (www.gutenberg.org)... 152.19.134.47, 2610:28:3090:3000:0:bad:cafe:47\n","Connecting to www.gutenberg.org (www.gutenberg.org)|152.19.134.47|:80... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 5784591 (5.5M) [text/plain]\n","Saving to: ‘/content/shakespeare.txt’\n","\n","/content/shakespear 100%[===================>]   5.52M  3.55MB/s    in 1.6s    \n","\n","2019-05-17 17:30:43 (3.55 MB/s) - ‘/content/shakespeare.txt’ saved [5784591/5784591]\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"AbL6cqCl7hnt"},"source":["### Build the data generator"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"E3V4V-Jxmuv3","colab":{"base_uri":"https://localhost:8080/","height":238},"outputId":"da453f32-7dab-460a-fe70-ec9b8a9f630a","executionInfo":{"status":"ok","timestamp":1558114247533,"user_tz":-330,"elapsed":15435,"user":{"displayName":"Param Deshpande","photoUrl":"https://lh5.googleusercontent.com/-8kLZUXMghn4/AAAAAAAAAAI/AAAAAAAAACE/sgnppB7wn4Y/s64/photo.jpg","userId":"14177415786827029018"}}},"source":["import numpy as np\n","import six\n","import tensorflow as tf\n","import time\n","import os\n","\n","# This address identifies the TPU we'll use when configuring TensorFlow.\n","TPU_WORKER = 'grpc://' + os.environ['COLAB_TPU_ADDR']\n","\n","SHAKESPEARE_TXT = '/content/shakespeare.txt'\n","\n","tf.logging.set_verbosity(tf.logging.INFO)\n","\n","def transform(txt, pad_to=None):\n","  # drop any non-ascii characters\n","  output = np.asarray([ord(c) for c in txt if ord(c) < 255], dtype=np.int32)\n","  if pad_to is not None:\n","    output = output[:pad_to]\n","    output = np.concatenate([\n","        np.zeros([pad_to - len(txt)], dtype=np.int32),\n","        output,\n","    ])\n","  return output\n","\n","def training_generator(seq_len=100, batch_size=1024):\n","  \"\"\"A generator yields (source, target) arrays for training.\"\"\"\n","  with tf.gfile.GFile(SHAKESPEARE_TXT, 'r') as f:\n","    txt = f.read()\n","\n","  tf.logging.info('Input text [%d] %s', len(txt), txt[:50])\n","  source = transform(txt)\n","  while True:\n","    offsets = np.random.randint(0, len(source) - seq_len, batch_size)\n","\n","    # Our model uses sparse crossentropy loss, but Keras requires labels\n","    # to have the same rank as the input logits.  We add an empty final\n","    # dimension to account for this.\n","    yield (\n","        np.stack([source[idx:idx + seq_len] for idx in offsets]),\n","        np.expand_dims(\n","            np.stack([source[idx + 1:idx + seq_len + 1] for idx in offsets]),\n","            -1),\n","    )\n","\n","six.next(training_generator(seq_len=10, batch_size=1))"],"execution_count":3,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Input text [5750559] ﻿\r\n","Project Gutenberg’s The Complete Works of Willi\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(array([[ 80, 114,  97, 121,  32, 121, 111, 117,  44,  32]], dtype=int32),\n"," array([[[114],\n","         [ 97],\n","         [121],\n","         [ 32],\n","         [121],\n","         [111],\n","         [117],\n","         [ 44],\n","         [ 32],\n","         [107]]], dtype=int32))"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Bbb05dNynDrQ"},"source":["### Build the model\n","\n","The model is defined as a two-layer, forward-LSTM—with two changes from the `tf.keras` standard LSTM definition:\n","\n","1. Define the input `shape` of the model to comply with the [XLA compiler](https://www.tensorflow.org/performance/xla/)'s static shape requirement.\n","2. Use `tf.train.Optimizer` instead of a standard Keras optimizer (Keras optimizer support is still experimental)."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"yLEM-fLJlEEt","colab":{}},"source":["EMBEDDING_DIM = 512\n","\n","def lstm_model(seq_len=100, batch_size=None, stateful=True):\n","  \"\"\"Language model: predict the next word given the current word.\"\"\"\n","  source = tf.keras.Input(\n","      name='seed', shape=(seq_len,), batch_size=batch_size, dtype=tf.int32)\n","\n","  embedding = tf.keras.layers.Embedding(input_dim=256, output_dim=EMBEDDING_DIM)(source)\n","  lstm_1 = tf.keras.layers.LSTM(EMBEDDING_DIM, stateful=stateful, return_sequences=True)(embedding)\n","  lstm_2 = tf.keras.layers.LSTM(EMBEDDING_DIM, stateful=stateful, return_sequences=True)(lstm_1)\n","  predicted_char = tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(256, activation='softmax'))(lstm_2)\n","  model = tf.keras.Model(inputs=[source], outputs=[predicted_char])\n","  model.compile(\n","      optimizer=tf.train.RMSPropOptimizer(learning_rate=0.01),\n","      loss='sparse_categorical_crossentropy',\n","      metrics=['sparse_categorical_accuracy'])\n","  return model"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"VzBYDJI0_Tfm"},"source":["### Train the model\n","\n","The `tf.contrib.tpu.keras_to_tpu_model` function converts a `tf.keras` model to an equivalent TPU version. You then use the standard Keras methods to train: `fit`, `predict`, and `evaluate`."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"ExQ922tfzSGA","colab":{"base_uri":"https://localhost:8080/","height":1091},"outputId":"8e5520c5-ffde-46c8-cf13-a45d90f55866","executionInfo":{"status":"ok","timestamp":1558114436336,"user_tz":-330,"elapsed":204232,"user":{"displayName":"Param Deshpande","photoUrl":"https://lh5.googleusercontent.com/-8kLZUXMghn4/AAAAAAAAAAI/AAAAAAAAACE/sgnppB7wn4Y/s64/photo.jpg","userId":"14177415786827029018"}}},"source":["tf.keras.backend.clear_session()\n","\n","training_model = lstm_model(seq_len=100, batch_size=128, stateful=False)\n","\n","tpu_model = tf.contrib.tpu.keras_to_tpu_model(\n","    training_model,\n","    strategy=tf.contrib.tpu.TPUDistributionStrategy(\n","        tf.contrib.cluster_resolver.TPUClusterResolver(TPU_WORKER)))\n","\n","tpu_model.fit_generator(\n","    training_generator(seq_len=100, batch_size=1024),\n","    steps_per_epoch=100,\n","    epochs=10,\n",")\n","tpu_model.save_weights('/tmp/bard.h5', overwrite=True)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Colocations handled automatically by placer.\n","\n","WARNING: The TensorFlow contrib module will not be included in TensorFlow 2.0.\n","For more information, please see:\n","  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md\n","  * https://github.com/tensorflow/addons\n","If you depend on functionality not listed there, please file an issue.\n","\n","INFO:tensorflow:Querying Tensorflow master (grpc://10.77.23.218:8470) for TPU system metadata.\n","INFO:tensorflow:Found TPU system:\n","INFO:tensorflow:*** Num TPU Cores: 8\n","INFO:tensorflow:*** Num TPU Workers: 1\n","INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, -1, 7891371172994009491)\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 17179869184, 10553998869198641545)\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 17179869184, 16131958943156872657)\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 17179869184, 16262053485620201753)\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 17179869184, 1697215912275868242)\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 17179869184, 16245309462386119086)\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 17179869184, 10922018566657915218)\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 17179869184, 4170693444593627785)\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 17179869184, 12626698816101061177)\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 17179869184, 4703213068990063700)\n","INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 17179869184, 12668718799519747691)\n","WARNING:tensorflow:tpu_model (from tensorflow.contrib.tpu.python.tpu.keras_support) is experimental and may change or be removed at any time, and without warning.\n","Epoch 1/10\n","INFO:tensorflow:Input text [5750559] ﻿\n","Project Gutenberg’s The Complete Works of Willi\n","INFO:tensorflow:New input shapes; (re-)compiling: mode=train (# of cores 8), [TensorSpec(shape=(128,), dtype=tf.int32, name='core_id0'), TensorSpec(shape=(128, 100), dtype=tf.int32, name='seed_10'), TensorSpec(shape=(128, 100, 1), dtype=tf.int32, name='time_distributed_target_30')]\n","INFO:tensorflow:Overriding default placeholder.\n","INFO:tensorflow:Remapping placeholder for seed\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/tpu/python/tpu/keras_support.py:302: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.cast instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/array_grad.py:425: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.cast instead.\n","INFO:tensorflow:Started compiling\n","INFO:tensorflow:Finished compiling. Time elapsed: 8.899184942245483 secs\n","INFO:tensorflow:Setting weights on TPU model.\n","100/100 [==============================] - 37s 366ms/step - loss: 4.5300 - sparse_categorical_accuracy: 0.1724\n","Epoch 2/10\n","100/100 [==============================] - 15s 148ms/step - loss: 3.5033 - sparse_categorical_accuracy: 0.1662\n","Epoch 3/10\n","100/100 [==============================] - 15s 148ms/step - loss: 2.8914 - sparse_categorical_accuracy: 0.2368\n","Epoch 4/10\n","100/100 [==============================] - 15s 147ms/step - loss: 2.0564 - sparse_categorical_accuracy: 0.4000\n","Epoch 5/10\n","100/100 [==============================] - 15s 146ms/step - loss: 1.6704 - sparse_categorical_accuracy: 0.5034\n","Epoch 6/10\n","100/100 [==============================] - 15s 146ms/step - loss: 1.4781 - sparse_categorical_accuracy: 0.5522\n","Epoch 7/10\n","100/100 [==============================] - 15s 148ms/step - loss: 1.3781 - sparse_categorical_accuracy: 0.5783\n","Epoch 8/10\n","100/100 [==============================] - 15s 148ms/step - loss: 1.3221 - sparse_categorical_accuracy: 0.5923\n","Epoch 9/10\n","100/100 [==============================] - 15s 148ms/step - loss: 1.2844 - sparse_categorical_accuracy: 0.6017\n","Epoch 10/10\n","100/100 [==============================] - 15s 147ms/step - loss: 1.2571 - sparse_categorical_accuracy: 0.6087\n","INFO:tensorflow:Copying TPU weights to the CPU\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"TCBtcpZkykSf"},"source":["### Make predictions with the model\n","\n","Use the trained model to make predictions and generate your own Shakespeare-esque play.\n","Start the model off with a *seed* sentence, then generate 250 characters from it. The model makes five predictions from the initial seed."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"tU7M-EGGxR3E","colab":{"base_uri":"https://localhost:8080/","height":867},"outputId":"15d74570-7354-41be-838e-6c5351bc48f4","executionInfo":{"status":"ok","timestamp":1558114456393,"user_tz":-330,"elapsed":224286,"user":{"displayName":"Param Deshpande","photoUrl":"https://lh5.googleusercontent.com/-8kLZUXMghn4/AAAAAAAAAAI/AAAAAAAAACE/sgnppB7wn4Y/s64/photo.jpg","userId":"14177415786827029018"}}},"source":["BATCH_SIZE = 5\n","PREDICT_LEN = 250\n","\n","# Keras requires the batch size be specified ahead of time for stateful models.\n","# We use a sequence length of 1, as we will be feeding in one character at a \n","# time and predicting the next character.\n","prediction_model = lstm_model(seq_len=1, batch_size=BATCH_SIZE, stateful=True)\n","prediction_model.load_weights('/tmp/bard.h5')\n","\n","# We seed the model with our initial string, copied BATCH_SIZE times\n","\n","seed_txt = 'Looks it not like the king?  Verily, we must go! '\n","seed = transform(seed_txt)\n","seed = np.repeat(np.expand_dims(seed, 0), BATCH_SIZE, axis=0)\n","\n","# First, run the seed forward to prime the state of the model.\n","prediction_model.reset_states()\n","for i in range(len(seed_txt) - 1):\n","  prediction_model.predict(seed[:, i:i + 1])\n","\n","# Now we can accumulate predictions!\n","predictions = [seed[:, -1:]]\n","for i in range(PREDICT_LEN):\n","  last_word = predictions[-1]\n","  next_probits = prediction_model.predict(last_word)[:, 0, :]\n","  \n","  # sample from our output distribution\n","  next_idx = [\n","      np.random.choice(256, p=next_probits[i])\n","      for i in range(BATCH_SIZE)\n","  ]\n","  predictions.append(np.asarray(next_idx, dtype=np.int32))\n","  \n","\n","for i in range(BATCH_SIZE):\n","  print('PREDICTION %d\\n\\n' % i)\n","  p = [predictions[j][i] for j in range(PREDICT_LEN)]\n","  generated = ''.join([chr(c) for c in p])\n","  print(generated)\n","  print()\n","  assert len(generated) == PREDICT_LEN, 'Generated text too short'"],"execution_count":6,"outputs":[{"output_type":"stream","text":["PREDICTION 0\n","\n","\n"," Unleft\r\n","    have in the smile! Come is bloody shoke; so denies\r\n","    In incontinuence, rich oftentime body]\r\n","  DUCHESS. Why is a peace in enter him! Godgogen again, that we fell will do a good\r\n","    good and thou giving. You'll innocence.\r\n","  BOYET. I \n","\n","PREDICTION 1\n","\n","\n"," What thou do?\r\n","  LUCIUS' SERVANT. He hath well some man that come nobly so for the\r\n","    you lay too for the admitteen in this furrow aleren hundred in might make the goodman\r\n","    Would discoin saith his end liberty, if my add the indigned the\r\n","    E\n","\n","PREDICTION 2\n","\n","\n"," What lady!\r\n","  SOLDIER. Contending me.\r\n","  GLOUCESTER. Ay, Sir John, yours she seen he is through it; for he hes very all to her bow.\r\n","  ENOBARBUS. Not I sword tis not deeper to him.\r\n","  RATCLIFF. If I would not then answer me sure to Sneak his shindro\n","\n","PREDICTION 3\n","\n","\n"," Preachmen sky,\r\n","For thou may abumd do the heat all child.\r\n","\r\n","IAGO.\r\n","I prithee hath pen he not better how and repeaks by appreading; for\r\n","Cannot with mine own and a words of him will I not be for, or his manners;\r\n","And she talks and father, I say.\r\n","An\n","\n","PREDICTION 4\n","\n","\n"," thou give bear or the poor\r\n","    un head.\r\n","  CLEOPATRA. 'Tis sir you this living potent of heaven do conjured,\r\n","    And then you to the mirul or me close, greater not your deed\r\n","    Here confins and burn- and between thy cherry\r\n","    To have the princ\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"2a5cGsSTEBQD"},"source":["## What's next\n","\n","* Learn about [Cloud TPUs](https://cloud.google.com/tpu/docs) that Google designed and optimized specifically to speed up and scale up ML workloads for training and inference and to enable ML engineers and researchers to iterate more quickly.\n","* Explore the range of [Cloud TPU tutorials and Colabs](https://cloud.google.com/tpu/docs/tutorials) to find other examples that can be used when implementing your ML project.\n","\n","On Google Cloud Platform, in addition to GPUs and TPUs available on pre-configured [deep learning VMs](https://cloud.google.com/deep-learning-vm/),  you will find [AutoML](https://cloud.google.com/automl/)*(beta)* for training custom models without writing code and [Cloud ML Engine](https://cloud.google.com/ml-engine/docs/) which will allows you to run parallel trainings and hyperparameter tuning of your custom models on powerful distributed hardware.\n"]}]}